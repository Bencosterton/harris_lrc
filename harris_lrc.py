import logging, subprocess, re, socket, time, json, threading, base64, argparse
from datetime import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import urlparse, parse_qs

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Global router configuration
router_host = None
router_port = 52116

class IP3Router:
    def __init__(self, host, port=52116):
        self.host = host
        self.port = port
        self.sock = None
        self.connected = False
        logger.info(f"IP3Router initialized with host {host}:{port}")

    def connect(self):
        #Establish connection to the router.
        if self.connected:
            return True
            
        try:
            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.sock.settimeout(5) 
            self.sock.connect((self.host, self.port))
            self.connected = True
            logger.info(f"Connected to router at {self.host}:{self.port}")
            return True
        except (socket.error, ConnectionRefusedError) as e:
            logger.error(f"Failed to connect to router: {str(e)}")
            self.connected = False
            return False

    def ensure_connection(self):
        #Ensure connection is established before operations.
        if not self.connected:
            return self.connect()
        return True

    def clear_buffer(self):
        #Clear any existing data in the socket buffer to prevent mixed responses.
        if not self.ensure_connection():
            return False

        self.sock.settimeout(0.1)
        try:
            while self.sock.recv(4096):
                pass
        except socket.timeout:
            pass
        self.sock.settimeout(None)

    def status(self, dst, retries=3):
        #Send the status command and attempt to get a valid response.
        if not self.ensure_connection():
            return None

        for attempt in range(retries):
            try:
                self.clear_buffer()
                command = f"~XPOINT?D${{{dst}}}\\\n"
                self.sock.sendall(command.encode())

                time.sleep(0.5)

                response = self.sock.recv(4096).decode()

                if f"D${{{dst}}}" in response:
                    match = re.search(r"S\${(.*?)}\\", response)
                    if match:
                        source = match.group(1)
                        logger.info(f"Source '{source}' is routed to Destination '{dst}'")
                        return source
                    else:
                        logger.warning(f"Could not parse source for {dst}. Raw response: '{response.strip()}'")
                        return None

                logger.warning(f"Attempt {attempt + 1} failed. Retrying...")

            except socket.error as e:
                logger.error(f"Socket error during status check: {str(e)}")
                self.connected = False
                if attempt == retries - 1:
                    return None
                time.sleep(1) 

        logger.error(f"Failed to get a valid response for {dst} after {retries} attempts.")
        return None

    def route(self, src, dst, retries=3):
        #route a source to a destination
        for attempt in range(retries):
            self.clear_buffer()
            command = f"~XPOINT:S${{{src}}};D${{{dst}}}\\\n"  
            self.sock.sendall(command.encode())

            time.sleep(0.5)  

            response = self.sock.recv(4096).decode()
            logger.debug(f"Router Response: '{response.strip()}'")

            if "LOCK!D" in response:
                logger.info(f"Destination '{dst}' is locked")
                return "locked" 
                
            current_source = self.status(dst)
            if current_source == src:
                logger.info(f"Successfully routed Source '{src}' to Destination '{dst}'")
                return True
            else:
                logger.warning(f"Attempt {attempt + 1} failed. Unexpected response.")

        logger.error(f"Failed to route Source '{src}' to Destination '{dst}' after {retries} attempts.")
        return False

    def close(self):
        #Close the connection to the router.
        if self.sock:
            self.sock.close()
            self.connected = False
            logger.info("Router connection closed")

    def clear_route(self, src, retries=3):
        #Clear the route for a source.
        if not self.ensure_connection():
            return False

        for attempt in range(retries):
            try:
                self.clear_buffer()
                command = f"~XPOINT%D${{{src}}}\\\n"
                self.sock.sendall(command.encode())

                time.sleep(1.0)

                response = self.sock.recv(4096).decode()
                logger.info(f"Clear Route Response: '{response.strip()}'")

                if "cleared" in response or f"D${{{src}}}" not in response:
                    logger.info(f"Successfully cleared route for Source '{src}'")
                    return True
                else:
                    logger.warning(f"Attempt {attempt + 1} failed. Response: '{response.strip()}'")

            except socket.error as e:
                logger.error(f"Socket error during clear route: {str(e)}")
                self.connected = False
                if attempt == retries - 1:
                    return False
                time.sleep(1)  

        logger.error(f"Failed to clear route for Source '{src}' after {retries} attempts.")
        return False
    
    def lock_destination(self, dst, retries=3):
        #Lock a destination
        for attempt in range(retries):
            self.clear_buffer()
            command = f"LOCK:D${{{dst}}};V${{ON}};U#{{20}}\\\n"
            self.sock.sendall(command.encode())

            time.sleep(0.5)

            response = self.sock.recv(4096).decode()
            print(f"Lock Response: '{response.strip()}'")

            print(f"Lock command sent for destination '{dst}'")
            return True

        return False

    def unlock_destination(self, dst, retries=3):
        #Unlock a destination
        for attempt in range(retries):
            self.clear_buffer()
            command = f"LOCK:D${{{dst}}};V${{OFF}};U#{{20}}\\\n" 
            self.sock.sendall(command.encode())

            time.sleep(0.5)

            response = self.sock.recv(4096).decode()
            print(f"Unlock Response: '{response.strip()}'")

            if response:
                print(f"Successfully unlocked destination '{dst}'")
                return True
            else:
                print(f"Attempt {attempt + 1} failed to unlock destination")

        print(f"Failed to unlock destination '{dst}' after {retries} attempts")
        return False

# HTML template will be decoded from base64 at startup
HTML_TEMPLATE = None

HTML_TEMPLATE_B64 = """"""

def load_ui_template():
    global HTML_TEMPLATE
    HTML_TEMPLATE = base64.b64decode(HTML_TEMPLATE_B64).decode('utf-8')

# Global variables
router = None
simulation_mode = False
SOURCES = {
    
}
DESTINATIONS = {

}
SOURCE_ALIASES = {

}
DESTINATION_ALIASES = {

}


#
# Source and Destination Categories
#

SOURCE_CATEGORIES = {
    'SRC CAT 1': ['', '', '', ''], 
    'SRC CAT 2': ['', '', '', ''],
    'SRC CAT 3': ['', '', '', ''],
    'SRC CAT 4': ['', '', '', ''],
    }

DESTINATION_CATEGORIES = {
    'DST CAT 1': ['', '', '', ''], 
    'DST CAT 2': ['', '', '', ''],
    'DST CAT 3': ['', '', '', ''],
    'DST CAT 4': ['', '', '', ''],
}

def categorize_with_mapping(items, category_map):
    #Categorize items based on custom mapping
    categories = {}
    uncategorized = []

    for category, category_items in category_map.items():
        categories[category] = []
        for item in items:
            if item in category_items:
                categories[category].append(item)
        categories[category].sort()

    categorized_items = [item for sublist in category_map.values() for item in sublist]
    uncategorized = [item for item in items if item not in categorized_items]

    if uncategorized:
        categories['Other'] = sorted(uncategorized)

    categories = {k: v for k, v in categories.items() if v}

    return dict(sorted(categories.items()))

def load_router_config():
    global SOURCES, DESTINATIONS, router
    try:
        # Ensure router connection is available
        if router is None:
            initialize_router()
        
        if router is None or simulation_mode:
            logger.warning("Router not available, using empty configuration")
            return {}, {}
        
        # Query sources from router using proper Harris LRC protocol
        sources = []
        SOURCES.clear()
        try:
            router.clear_buffer()
            src_command = "~SRC?Q${NAME}\\\n"
            router.sock.sendall(src_command.encode())
            
            import time
            time.sleep(0.5)
            
            # Read the full response until we see the termination marker
            src_response = ""
            while True:
                chunk = router.sock.recv(4096).decode()
                src_response += chunk
                if '~SRC%Q${NAME}\\' in src_response:  # Complete response received
                    break
                    
            logger.info(f"Source query response length: {len(src_response)} characters")
            logger.info(f"Source query response (first 200 chars): '{src_response[:200]}...'")
            
            # Parse source entries using the working pattern
            src_pattern = r'~SRC%I#\{(\d+)\};NAME\$\{([^}]+)\}'
            src_matches = re.findall(src_pattern, src_response)
            logger.info(f"Source regex matches: {len(src_matches)} total matches")
            
            # Sort by source number and populate SOURCES dict
            src_matches.sort(key=lambda x: int(x[0]))
            for number, name in src_matches:
                SOURCES[int(number)] = name
                sources.append(name)
            
            logger.info(f"Loaded {len(sources)} sources from router")
            
        except Exception as e:
            logger.error(f"Error querying sources: {str(e)}")
        
        # Query destinations from router using proper Harris LRC protocol
        destinations = []
        DESTINATIONS.clear()
        try:
            router.clear_buffer()
            dest_command = "~DEST?Q${NAME}\\\n"
            router.sock.sendall(dest_command.encode())
            
            time.sleep(0.5)
            
            # Read the full response until we see the termination marker
            dest_response = ""
            while True:
                chunk = router.sock.recv(4096).decode()
                dest_response += chunk
                if '~DEST%Q${NAME}\\' in dest_response:  # Complete response received
                    break
                    
            logger.info(f"Destination query response length: {len(dest_response)} characters")
            logger.info(f"Destination query response (first 200 chars): '{dest_response[:200]}...'")
            
            # Parse destination entries using the working pattern
            dest_pattern = r'~DEST%I#\{(\d+)\};NAME\$\{([^}]+)\}'
            dest_matches = re.findall(dest_pattern, dest_response)
            logger.info(f"Destination regex matches: {len(dest_matches)} total matches")
            
            # Sort by destination number and populate DESTINATIONS dict
            dest_matches.sort(key=lambda x: int(x[0]))
            for number, name in dest_matches:
                DESTINATIONS[int(number)] = name
                destinations.append(name)
            
            logger.info(f"Loaded {len(destinations)} destinations from router")
            
        except Exception as e:
            logger.error(f"Error querying destinations: {str(e)}")
        
        # Add alias sources while keeping originals
        for alias in SOURCE_ALIASES.keys():
            if SOURCE_ALIASES[alias] in sources:
                sources.append(alias)

        # Add alias destinations while keeping originals
        for alias in DESTINATION_ALIASES.keys():
            if DESTINATION_ALIASES[alias] in destinations:
                destinations.append(alias)
        
        grouped_sources = categorize_with_mapping(sources, SOURCE_CATEGORIES)
        grouped_destinations = categorize_with_mapping(destinations, DESTINATION_CATEGORIES)
        
        logger.info(f"Successfully loaded and categorized router configuration from router queries")
        return grouped_sources, grouped_destinations
        
    except Exception as e:
        logger.error(f"Error loading router config: {str(e)}")
        return {}, {}
    

def try_router_connection(host, port=52116):
    #Attempt to connect to the router
    global router, simulation_mode
    try:
        router = IP3Router(host, port)
        simulation_mode = False
        logger.info("Successfully connected to physical router")
        return True
    except Exception as e:
        logger.warning(f"Router connection failed: {str(e)}")
        return False

def initialize_router():
    #Initialize router connection
    global router, router_host, router_port
    if router is None and router_host is not None:
        try_router_connection(router_host, router_port)


class RouterHTTPRequestHandler(BaseHTTPRequestHandler):
    #HTTP requets for router control interface
    
    def do_GET(self):
        #Handle GET requests
        parsed_path = urlparse(self.path)
        path = parsed_path.path
        
        if path == '/':
            self.serve_index()
        elif path.startswith('/status/'):
            destination = path.split('/')[-1]
            self.handle_status(destination)
        elif path == '/router_status':
            self.handle_router_status()
        else:
            self.send_error(404, "Not Found")
    
    def do_POST(self):
        #Handle POST requests
        parsed_path = urlparse(self.path)
        path = parsed_path.path
        
        if path == '/route':
            self.handle_route()
        elif path.startswith('/lock/'):
            destination = path.split('/')[-1]
            self.handle_lock(destination)
        elif path.startswith('/unlock/'):
            destination = path.split('/')[-1]
            self.handle_unlock(destination)
        else:
            self.send_error(404, "Not Found")
    
    def serve_index(self):
        #Serve the main index.html page with router data
        try:
            # Load router configuration
            grouped_sources, grouped_destinations = load_router_config()
            
            # Extract flat lists from categorized data
            sources = []
            for category_items in grouped_sources.values():
                sources.extend(category_items)
            sources = sorted(list(set(sources)))  # Remove duplicates and sort
            
            destinations = []
            for category_items in grouped_destinations.values():
                destinations.extend(category_items)
            destinations = sorted(list(set(destinations)))  # Remove duplicates and sort
            
            # Render embedded template with context
            html_content = self.render_template(
                sources=sources,
                destinations=destinations,
                source_categories=list(SOURCE_CATEGORIES.keys()),
                destination_categories=list(DESTINATION_CATEGORIES.keys()),
                source_to_categories={src: [cat for cat, items in SOURCE_CATEGORIES.items() if src in items] for src in sources},
                destination_to_categories={dst: [cat for cat, items in DESTINATION_CATEGORIES.items() if dst in items] for dst in destinations},
                simulation_mode=simulation_mode
            )
            
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(html_content.encode('utf-8'))
            
        except Exception as e:
            logger.error(f"Error serving index: {str(e)}")
            self.send_error(500, f"Internal Server Error: {str(e)}")
    

    
    def handle_route(self):
        #Handle routing requests
        if router is None:
            initialize_router()
        
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8'))
            
            source = data.get('source')
            destination = data.get('destination')
            
            if not source or not destination:
                response = {
                    'success': False, 
                    'message': 'Source and destination required'
                }
            else:
                router_destination = DESTINATION_ALIASES.get(destination, destination)
                router_source = SOURCE_ALIASES.get(source, source)
                
                result = router.route(router_source, router_destination)
                
                if result == "locked":
                    response = {
                        'success': False,
                        'locked': True,
                        'message': 'Destination is locked, contact Engineering',
                        'simulation': simulation_mode
                    }
                else:
                    response = {
                        'success': True,
                        'result': result,
                        'simulation': simulation_mode
                    }
            
            self.send_json_response(response)
            
        except Exception as e:
            logger.error(f"Error in route operation: {str(e)}")
            response = {
                'success': False,
                'message': f'Error: {str(e)}',
                'simulation': simulation_mode
            }
            self.send_json_response(response)
    
    def handle_status(self, destination):
        #Handle status requests
        if router is None:
            initialize_router()
        
        try:
            router_destination = DESTINATION_ALIASES.get(destination, destination)
            current_source = router.status(router_destination)
            
            response = {
                'success': True if current_source else False,
                'source': current_source,
                'destination': destination,
                'simulation': simulation_mode
            }
            self.send_json_response(response)
            
        except Exception as e:
            logger.error(f"Error in status check: {str(e)}")
            response = {
                'success': False,
                'message': str(e),
                'simulation': simulation_mode
            }
            self.send_json_response(response)
    
    def handle_router_status(self):
        #Handle router status requests
        if router is None:
            initialize_router()
        
        response = {
            'simulation_mode': simulation_mode,
            'status': 'Simulated' if simulation_mode else 'Connected'
        }
        self.send_json_response(response)
    
    def handle_lock(self, destination):
        #Handle lock destination requests
        if router is None:
            initialize_router()
        
        try:
            router_destination = DESTINATION_ALIASES.get(destination, destination)
            success = router.lock_destination(router_destination)
            response = {
                'success': success,
                'message': f"{'Successfully locked' if success else 'Failed to lock'} {destination}",
                'simulation': simulation_mode
            }
            self.send_json_response(response)
            
        except Exception as e:
            logger.error(f"Error in lock operation: {str(e)}")
            response = {
                'success': False,
                'message': f'Error: {str(e)}',
                'simulation': simulation_mode
            }
            self.send_json_response(response)
    
    def handle_unlock(self, destination):
        #Handle unlock destination requests
        if router is None:
            initialize_router()
        
        try:
            router_destination = DESTINATION_ALIASES.get(destination, destination)
            success = router.unlock_destination(router_destination)
            response = {
                'success': success,
                'message': f"{'Successfully unlocked' if success else 'Failed to unlock'} {destination}",
                'simulation': simulation_mode
            }
            self.send_json_response(response)
            
        except Exception as e:
            logger.error(f"Error in unlock operation: {str(e)}")
            response = {
                'success': False,
                'message': f'Error: {str(e)}',
                'simulation': simulation_mode
            }
            self.send_json_response(response)
    
    def send_json_response(self, data):
        #Send a JSON response
        json_data = json.dumps(data)
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        self.wfile.write(json_data.encode('utf-8'))
    
    def render_template(self, **context):
        #Render the embedded HTML template with context data
        rendered = HTML_TEMPLATE
        
        # Generate HTML for sources
        sources_html = ""
        for source in context.get('sources', []):
            categories = " ".join(context.get('source_to_categories', {}).get(source, []))
            sources_html += f'<div class="source-btn" data-source="{source}" data-categories="{categories}">{source}</div>\n'
        
        # Generate HTML for destinations  
        destinations_html = ""
        for destination in context.get('destinations', []):
            categories = " ".join(context.get('destination_to_categories', {}).get(destination, []))
            destinations_html += f'<div class="destination-btn" data-destination="{destination}" data-categories="{categories}">{destination}</div>\n'
        
        # Generate HTML for source categories
        source_categories_html = ""
        for category in context.get('source_categories', []):
            source_categories_html += f'<button class="category-btn" data-category="{category}">{category}</button>\n'
        
        # Generate HTML for destination categories
        destination_categories_html = ""
        for category in context.get('destination_categories', []):
            destination_categories_html += f'<button class="category-btn" data-category="{category}">{category}</button>\n'
        
        # Router status
        router_status = "active" if not context.get('simulation_mode', False) else ""
        
        # Simulation banner
        simulation_banner = '<div class="simulation-banner">Router Not Connected</div>' if context.get('simulation_mode', False) else ""
        
        # Current timestamp
        timestamp = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
        
        # Replace placeholders
        rendered = rendered.replace('{sources}', sources_html)
        rendered = rendered.replace('{destinations}', destinations_html)
        rendered = rendered.replace('{source_categories}', source_categories_html)
        rendered = rendered.replace('{destination_categories}', destination_categories_html)
        rendered = rendered.replace('{router_status}', router_status)
        rendered = rendered.replace('{simulation_banner}', simulation_banner)
        rendered = rendered.replace('{timestamp}', timestamp)
        
        return rendered
    
    def log_message(self, format, *args):
        logger.info(f"{self.address_string()} - {format % args}")


def start_server(port=5050):
    server_address = ('0.0.0.0', port)
    httpd = HTTPServer(server_address, RouterHTTPRequestHandler)
    logger.info(f"Starting HTTP server on {server_address[0]}:{server_address[1]}")
    
    # Initialize router in a separate thread
    router_thread = threading.Thread(target=initialize_router)
    router_thread.daemon = True
    router_thread.start()
    
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        logger.info("Server stopped by user")
        httpd.shutdown()


def parse_arguments():
    parser = argparse.ArgumentParser(description='Harris LRC Router Control Server')
    parser.add_argument('--host', required=True, help='Router IP address (required)')
    parser.add_argument('--port', type=int, default=52116, help='Router port (default: 52116)')
    return parser.parse_args()

def set_router_config(host, port):
    global router_host, router_port
    router_host = host
    router_port = port

if __name__ == '__main__':
    args = parse_arguments()
    set_router_config(args.host, args.port)
    
    logger.info(f"Starting router control server...")
    logger.info(f"Router: {router_host}:{router_port}")
    logger.info(f"Web server will run on port 5050")
    
    load_ui_template()  
    start_server(5050)
